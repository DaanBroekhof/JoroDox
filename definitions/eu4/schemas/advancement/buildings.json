{
  "$id": "http://jorodox.org/schemas/buildings.json",
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "name": {
      "$identifierValue": [
        {
          "type": "localisation",
          "prefix": "l_english.building_"
        }
      ],
      "type": "string"
    },
    "data": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "cost": {
          "type": "number"
        },
        "time": {
          "type": "number"
        },
        "make_obsolete": {
          "description": "Optional, whether this building operates like a fort",

          "$ref": "identifiers.json#/definitions/buildings"
        },

        "one_per_country": {
          "description": "Optional, limits construction to one per country",
          "$ref": "special_values.json#/definitions/boolean"
        },
        "allow_in_gold_provinces": {
          "description": "Optional, whether this building can be built in Gold producing provinces",
          "$ref": "special_values.json#/definitions/boolean"
        },
        "indestructible": {
          "description": "Optional, exempts this building from being destroyed via bankruptcy",
          "$ref": "special_values.json#/definitions/boolean"
        },
        "onmap": {
          "description": "Optional, whether this building should display a 3D map model",
          "$ref": "special_values.json#/definitions/boolean"
        },
        "influencing_fort": {
          "description": "Optional, whether this building operates like a fort",
          "$ref": "special_values.json#/definitions/boolean"
        },
        "government_specific": {
          "description": "Optional, whether this building is specific for a government type",
          "$ref": "special_values.json#/definitions/boolean"
        },
        "show_separate": {
          "description": "Optional, means as a manufactory it will be shown according to the old way",
          "$ref": "special_values.json#/definitions/boolean"
        },


        "manufactory": {
          "description": "Optional, makes listed building obsolete when this building is constructed",
          "type": "array",
          "items": {
            "$ref": "identifiers.json#/definitions/tradegoods"
          }
        },
        "trigger": {
          "description": "Optional. Province scope. Limits construction of building if not met.",
          "$ref": "province_conditions.json#/definitions/province_conditions"
        },
        "potential": {
          "description": "Optional. If this building should be available",
          "$ref": "country_conditions.json#/definitions/country_conditions"
        },
        "modifier": {
          "description": "The modifier the building applies to the province. Country-scope modifiers used here will apply to the owning country of the building instead.",
          "$mergeProps": [
            {"$ref": "province_modifiers.json#/definitions/province_modifiers"},
            {"$ref": "country_modifiers.json#/definitions/country_modifiers"}
          ]
        },
        "ai_will_do": {
          "description": "The importance the AI places on constructing this building.",
          "$ref": "scope_factors.json#/definitions/province_factor"
        },
        "on_built": {
          "description": "Optional. On action that fires when built. THIS = Province, FROM = Builder (not necessarily owner, can be overlord)",
          "comment": "TODO: define this",
          "type": "object"
        },
        "on_destroyed": {
          "description": "Optional. On action that fires when destroyed. (not obsoleted) THIS = Province, FROM = Destroyer",
          "comment": "TODO: define this",
          "type": "object"
        },
        "on_obsolete": {
          "description": "Optional. On action that fires when obsoleted. (not destroyed) THIS = Province, FROM = Destroyer",
          "comment": "TODO: define this",
          "type": "object"
        }
      },
      "required": []
    }
  },
  "required": [
    "name",
    "data"
  ]
}